<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section xml:id="bhax-textbook-feladatok-mandelbrot.Mandelbrot">
        <title>A Mandelbrot halmaz</title>
        <para>
            Írj olyan C programot, amely kiszámolja a Mandelbrot halmazt!     
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
        <para>
            Megoldás forrása:                
 <link xlink:href="../../../bhax/attention_raising/CUDA/mandelpngt.c++">
                <filename>bhax/attention_raising/CUDA/mandelpngt.c++</filename>
            </link> nevű állománya.            
        </para>
        <para>
            A Mandelbrot halmaz Benoit Mandelbrot nevéhez fűződik, aki még 1980-ban fedezte fel azt a komplex számsíkon, akkor el is nevezték róla.</para>
	<para>
	De mit is nevezünk komplex számoknak?
	</para>
	<para>
	Azok a számok, amelyek "nem létező számok" úgynevezett imaginárius azaz "képzeletbeli" számok. Ezekre azért van szükségünk hogy kitudjuk fejezni magunkat olyan helyzetben is amire nem létezik valós megoldás. Mint például a páros gyökkitevőjű gyök alatti negatív szám értéke. Ugyanis még középiskolában is azt tanítják, hogy a páros gyökkitevőjű gyök alatti negatív számot nem tudjuk értelmezni, de egyetemen már a komplex számok bevezetésével ezeket is tudjuk értelmezni.
        </para>
        <para> 
            Hogyan láthatjuk meg a Mandelbrot halmazt?
	</para>
	<para>
	Hát úgy, hogy az origó középpontú négyzetbe lefektetünk egy négyzet rácsot például 600x600 vagy 800x800 stb. Valamint ezután kiszámoljuk, hogy a lefektett rács pontjai mely komplex számoknak felelnek meg. A z<subscript>n+1</subscript>=z<subscript>n</subscript><superscript>2</superscript>+c, (0&lt;=n) képletet felhasználva kapjuk majd meg, még pedig úgy hogy a c lesz a képletdben a  vizsgált rácspont, míg a z0 lesz az origó. Alkalmazva a képletet a továbbiakban: 
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    z<subscript>0</subscript> = 0
                </para>
            </listitem>
            <listitem>
                <para>
                    z<subscript>1</subscript> = 0<superscript>2</superscript>+c = c
                </para>
            </listitem>
            <listitem>
                <para>
                    z<subscript>2</subscript> = c<superscript>2</superscript>+c
                </para>
            </listitem>
            <listitem>
                <para>
                    z<subscript>3</subscript> = (c<superscript>2</superscript>+c)<superscript>2</superscript>+c
                </para>
            </listitem>
            <listitem>
                <para>
                    z<subscript>4</subscript> = ((c<superscript>2</superscript>+c)<superscript>2</superscript>+c)<superscript>2</superscript>+c
                </para>
            </listitem>
            <listitem>
                <para>
                    ... s így tovább.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            Vagyis a Mandelbrot halmaz megkeresése és kirajzolása úgy működik hogy kiindulunk az origóból (z<subscript>0</subscript>-ból) és onnan ugrunk a rács első pontjába a z<subscript>1</subscript> = c-be, aztán ettől a c-től függően a további z-kbe fogunk ugrani és azokat is vizsgáljuk. Mind addig ugrálunk míg ki nem érünk a 2 sugarú körből, ha ez megtörténik akkor a vizsgált rácspont nem lesz eleme a Mandelbrot halmaznak. Mivel végtelenségig nem tudjuk megvizsgálni ezért csak véges számú z elemet nézünk meg minden rácsponthoz. Viszont ha ez idő alatt nem lép ki a körből akkor feketére színezzük a rácspontot, ezzel jelezve azt hogy az a c rácspont a Mandelbrot halmaz része. Aztán lépünk tovább a következő rácspontra majd a következőre és így tovább. Végeredményként a Mandelbrot halmaz elemei fekete színnel lesznek jelölve.
        </para>

    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Írj olyan C++ programot, amely kiszámolja a Mandelbrot halmazt!                     
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>        
A <link xlink:href="#bhax-textbook-feladatok-mandelbrot.Mandelbrot">Mandelbrot halmaz</link> pontban vázolt
ismert algoritmust valósítja meg a repó <link xlink:href="../../../bhax/attention_raising/Mandelbrot/3.1.2.cpp">
                <filename>bhax/attention_raising/Mandelbrot/3.1.2.cpp</filename>
            </link> nevű állománya.
        </para>
	<para>
	Egyik legfontosabb különbség az hogy c++-ban tudjuk includeolni a complex könyvtárat ami nagyban megkönnyíti a munkánkat ugyanis biztosít nekünk complex típust így nem kell komplex számot "tartanunk". De nézzük is meg a kódot!
	</para>        
        <programlisting language="c++">
<![CDATA[#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag );

  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      // k megy az oszlopokon

      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}
]]>
        </programlisting>
	<para>
	Ehhez a feladathoz én Bátfai Norbert Tanár úr kódját használtam és értelmeztem. Szerintem a kommentelésből és a videóból könnyen megérthető hogy mit is csinál a program. Valamint az előző feladat alapján már nem fog nehezünkre esni a kód értelmezése. Hisz igazából ugyan az pár kisebb nagyobb különbséggel.
	</para> 
	<para>
	A CUDA-s verzióhoz képest ez annyival másabb (főként), hogy ez csak egy magszálon fut míg a CUDA-s megvalósításnál felossza rácsra, és minden rácsban vannak blokkok, és a blokkokon belül van például 100 szál, ahol végig egyszerre fognak dolgozni, ezáltal sokkal, de sokkal gyorsabb lesz maga a folyamat a CUDA-s megoldásban.
	</para>
	<para>
	A CUDA-s megvalósításról későbbi feladatban részletesebben fogunk beszélni! Így ha még nem világos mi is az a CUDA vagy milyen a CUDA-s megoldás nem kell kétségbeesni.
	</para>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
            A biomorfokra rátaláló Clifford Pickover meg volt győződve hogy természeti törvényre bukkant. 1986-ban volt ez, akkor valóban természeti formáknak tűntek ezek, ezért is "bio"morfok.
        </para> 
	<para>
	Az előző kódhoz hasonló lesz ez is, egy két kisebb-nagyobb változtatás kell csak mindössze.
	</para>  
	<para>
	Mint például a következő kódcsipetben jól látható hogy az előző kód a,b,c,d változói itt is jelen vannak csak xmin, xmax, ymin és ymax néven:
	</para>
	<para>
	Valamint még hozzá adunk egy "reC", egy "imC" és egy R változót is, így már az "argc==9" helyett is "argc==12"-őt írunk.
	</para>
<programlisting language="c"><![CDATA[    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
]]></programlisting>
	<para>
	Az előzőnek említett 3 új váltpzó közül kettő a komplexikáló függványnek a paramétere fog majd lenni, a következő féleképpen:
	</para>
<programlisting language="c"><![CDATA[std::complex<double> cc ( reC, imC );]]></programlisting>
	<para>
	A változtatások miatt a számláló for ciklusunkat is kicsit át kell írni és a beléágyazott while ciklusunkat is átírjuk for ciklusra, ahol hasznosítjuk a 3. új változónkat az R-t, ez a következő képpen fog kinézni a kódunkban:
	</para>
<programlisting language="c"><![CDATA[for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }]]></programlisting>
	<para>Ha z_n valós vagy imaginárius része nagyobb mint R akkor az iteráció a ciklus i változója lesz.</para>
                                                                                                                
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
	
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
        <para>
            Megoldás forrása:                
 <link xlink:href="../../../bhax/attention_raising/CUDA/mandelpngc_60x60_100.cu">
                <filename>bhax/attention_raising/CUDA/mandelpngc_60x60_100.cu</filename>
            </link> nevű állománya.            
        </para>
	<para>
	Ehhez a feladathoz fontos, hogy milyen hardverünk van, ugyanis ehhez a feladathoz nvidia kártyára lesz szükségünk, mivel csak azok a videókártyák rendelkeznek Cudacoreral.
	</para>
	<para>
	A CUDA kártya ellentétben a fenti feladattal, Ő nem CPU-n dolgozik hanem GPU-n (a GPU=Graphics processing unit azaz grafikai processzor/feldolgozó egység). Olyan műveleteket is megtud csinálni a CPU helyett manapság mint például a videókódolás, és nem csak hogy áttudja venni, de sokkal gyorsabban végzi is el azt. Ugyanis ahogy már a fentebbi feladatban említettem a CUDA-s megvalósításnál felossza rácsokra, és minden rácsban vannak blokkok, amelyeken belül van például 100 szál, ahol végig egyszerre fognak dolgozni. Azaz szinte mondható az hogy külön pontonként/pixelenként fog számolni, persze ez nem teljesen igaz, de egy erős túlzással állíthatjuk ezt.
	</para>
	<para>
	Hogyan tudjuk fordítani?
	</para>
	<para>
	nvcc fájlnév (pl. mandelpngc_60x60_100.cu) -lpng16 -O3 -o kimeneti fájlnév (például: mandelpngc)
	</para>
	<para>Ezután futtathatjuk is, érdemes a 2. feladat forrásával futtatni, és megnézni a két forrás futtása közti különbséget. Mit fogunk tapasztalni?</para>
	<para>Azt tapasztaljuk hogy többszörösen gyorsabb a CUDA-s megoldás, a cudecore-tól is számít persze ez, de 50-100x-os sebsséggel végzi el ugyan azt amit a 2. feladat.</para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
            Illetve <link xlink:href="https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal">https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal</link>.        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal">https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal</link>
        </para>
	<para>
	Már a nevéből is látható hogy ez bizony valamit nagyítani fog nekünk, de hogy és mit?
	</para>
	<para>
	Először is a libqt4-dev csomagra lesz szükségünk, ennek telepítése után tudjuk csak elvégezni a feladatot.
	</para>
	<para>
	Ha viszont ezzel rendelkezünk és egy mappában van az összes szükséges fájl, akkor a qmake paranccsal készíthetünk egy makefile-t, amit a make paranccsal lefuttathatunk. Majd a programunkat tudjuk futtatni a ./Frak pranccsal.
	</para>
	<para>
	Az eredmény frakablakok lesznek, amelyeken különféle fraktált alakzatok láthatóak, köztük kinagyított képek az eredeti halmazból, innen a nagyító kifejezés.
	</para>
	<para>Továbbá meg lehet azt oldani hogy egy bizonyos gomb lenyomásakor nagyítson a képünkön, ezáltal még részletesebben lássuk a kirajzolódást.</para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Ui3B6IJnssY">https://youtu.be/Ui3B6IJnssY</link>, 4:27-től.
            Illetve <link xlink:href="https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal">https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal</link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#id570518">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#id570518</link>
        </para>
	<para>Alapvetően ugyan az mint az előző feladat, annyi különbséggel ugye bár hogy más a programozási nyelv így nem árt a kódot átírni/újraírni különben nem is működne az.</para>
	<para>
	Először is szükségünk lesz a jdk8 csomagra a javás verzió elkészítéséhez és használatához, ezt a következőképpen tudjuk beszerezni:
	</para>
<programlisting language="c"><![CDATA[sudo apt-get install openjdk-8-jdk]]></programlisting>
<para>A javában include-álni/importolni máshogyan kell mint c++-ban, itt jelen esetben az extend-del fogunk. A MandelbrotHalmaz.javát úgy tudjuk használni a kódunkban ha azt a következőképpen importáljuk bele:</para>
<programlisting language="c"><![CDATA[public class MandelbrotHalmazNagyító extends MandelbrotHalmaz{...}]]></programlisting>
<para>Az előző feladatban már említett nagyítást szintén itt is be bindelhetjük valamelyik gombra, annak lenyomása után pedig egy "közelebbi" részletesebb képet kaphatunk a kirajzolt alakzatunkról.</para>
    </section>

</chapter>   

