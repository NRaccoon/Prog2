<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban az módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/polargen/">Polargen C++-ba</link>
, <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/kezdo/elsojava/PolarGen.java">Polargen Javába</link>            
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... térj ki arra is, hogy a JDK forrásaiban a Sun programozói
            pont úgy csinálták meg ahogyan te is, azaz az OO nemhogy nem nehéz, hanem éppen természetes neked!
        </para>
	<para>
	Ehhez a feladathoz szükségünk lesz a randomizálásra. A randomizálást c++ a következőképp tudjuk alkalmazni, először is a cstdlib mellett szükségünk van a ctime-ra is, tehát includeolni kell ezt, ugyanis az idő függvényében tudunk teljesen random számot készíteni az srandom által, különben a program mindig ugyan azt a random számot generálná, így viszont a futtatás ideje alapján mindig újat és újat.
	</para>
	<para>
	A kódban látható hogy folyamatosan figyeljük a tárolt számokat is, ezáltal azt is elkerüljük ha véletelenül már szerepelne a random számunk.
	</para>
	<para>
	A matematikai háttér jelenleg nem érdekel minket, legalábbis a feladat is megkér arra hogy erre most ne térjünk ki, tehát nem túl részletesen csak lényegre törően azt csinálja a programunk, hogy ha nincs eltárolva a randomizált számunk akkor lefut az algoritmus és vissza ad egy random számot két különböző változóba. Ahonnan az egyik ki lesz íratva a másik pedig el lesz tárolva. Amennyiben el van tárolva egyszerűen kiíratjuk.
	</para>
	<para>
	Valamint azt is megfigyelhetjük, ami a feladatban szerepel, tehát a JDK forrásaiban is hasonó felépítéssel vannak meg a kódok a miénkhez, tehát egy tapasztalt programozó is úgy oldaná meg ezt mint mi a jelenlegi tudásunkkal. Tehát mondhatni hogy ha ezt értjük akkor ugyanolyan természetes ez nekünk mint a Sun programozóinak.
	</para>              
    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="./Welch/z.c">
<filename>C Binfa</filename>
</link>                
        </para>
	<para>
	Az LZW (Lempel-Ziv-Welch nevéhez köthető, innen ered) egy veszteségmentes tömörítési algoritmus. A tömörítés alapja az hogy a kódoló csak egy szótárbeli indexet küld át. Erről részletesebben magyar nyelven olvashatunk a <link xlink:href="https://hu.wikipedia.org/wiki/LZW">Wikipédia oldalán</link>.
	</para>
	<para>
	A bináris fa egy olyan adatszerkezet amely belső és külső csúcsok hierarchikus elrendezéséből áll, ezzel megalkotva a szülő-gyermek elrendezést, mint az általános fa adatszerkezet. Fontos viszont kiemelni hogy minden "szülőnek" maximuma két gyermeke lehet, ez az amivel eltér a többi fa adatszerkezettől, valamint a gyermekeket megkülönböztetni úgy tudjuk a fában hogy bal vagy jobb oldalágat képezik-e a szűlőnek. Tehát fontos a sorrendjük is, bejárásra több példát is fogunk látni a következő feladatokban, ott majd részletesebben megismerkedünk a bejárás fogalmával és mintjével.
	</para>
	<para>Hogyan tudjuk fordítani a binfát?</para>
	<para>Egyszerűen annyi mint bármelyik másik c forráskódot, tehát valahogy így:</para>
<programlisting language="c"><![CDATA[g++ z.c -o z]]></programlisting>
	<para>Hogyan tudjuk futtatni?</para>
	<para>A futtatás se különbözik igazán, mindössze megkell neki adni egy bemeneti és kimeneti fájlt is, valahogy így:</para>
<programlisting language="c"><![CDATA[./z bemenetifájl -o kimeneteifájl]]></programlisting>
    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: 
<link xlink:href="./Welch/z_pre.c">
<filename>Preorder bejárás</filename>
</link>
, 
<link xlink:href="./Welch/z_post.c">
<filename>Postorder bejárás</filename>
</link>                  
        </para>
	<para>
	Az alap, tehát a fentebbi forráskód szerinti inorder bejárás:
	</para>
<programlisting language="c"><![CDATA[void
kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      _melyseif (melyseg > maxg);
	max_melyseg = melyseg;
      kiir (elem->jobb_egy);
      // ez a postorder bejáráshoz képest
      // 1-el nagyobb mélység, ezért -1
      for (int i = 0; i < melyseg; ++i)
	printf ("---");
      printf ("%c(%d)\n", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek,
	      melyseg - 1);
      kiir (elem->bal_nulla);
      --melyseg;
    }
}]]></programlisting>
	<para>
	A bejárás megváltoztatása a forróskódban egy egyszerű sor kicseréléssel valósítható meg, ugyanis a program lineárisan halad a végrehajtáson és ha előre rakjuk pl a gyökér elem vizsgálatát és csak utána a bal, s majd jobb ág vizsgálatát már is preorderben lesz a bejárás. Ha végére rakjuk a gyökér elem vizsgálatát nyilván posztorder bejárást fog eredményezni.
	</para>
	<para>Preorder bejárás:</para>
<programlisting language="c"><![CDATA[void
kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      if (melyseg > max_melyseg)
	max_melyseg = melyseg;
      
      // ez a postorder bejáráshoz képest
      // 1-el nagyobb mélység, ezért -1
      for (int i = 0; i < melyseg; ++i)
	printf ("---");
      printf ("%c(%d)\n", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek,
	      melyseg - 1);
      kiir (elem->bal_nulla);
	kiir (elem->jobb_egy);      
--melyseg;
    }
}]]></programlisting>
	<para>És posztorder bejárással is:</para>
<programlisting language="c"><![CDATA[void
kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      if (melyseg > max_melyseg)
	max_melyseg = melyseg;
      
	kiir (elem->jobb_egy);
	kiir (elem->bal_nulla);
      // ez a postorder bejáráshoz képest
      // 1-el nagyobb mélység, ezért -1
      for (int i = 0; i < melyseg; ++i)
	printf ("---");
      printf ("%c(%d)\n", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek,
	      melyseg - 1);      
--melyseg;
    }
}]]></programlisting>
	<para>
	A név nem véletlenszerű hiszen az angol szavakból ered, "pre" mint elől "post" mint hátul és "in" mint benne/középen, és a gyök elem helyzetét árulja el a bejárás során. 
	</para>
    </section>        
                        
    <section>
        <title>Tag a gyökér</title>
        <para>
            Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node
            osztálya. A gyökér csomópont legyen kompozícióban a fával!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="./Welch/z3a7.cpp">
<filename>Tag a gyökér</filename>
</link>              
        </para>
<programlisting language="c"><![CDATA[LZWBinFa ()
    {
	gyoker = new Csomopont;
	gyoker = fa;
    }]]></programlisting>
	<para>
	A kód alapján jól látható hogy nem mutató a gyökér (mint ahogy az a következő feladatban szerepelni fog), hanem a feladat leírása szerint egy Tree és egy beágyazott Csomópont osztály.
	</para>
<programlisting language="c"><![CDATA[#include <iostream>
#include <cmath>
#include <fstream>

class LZWBinFa
{
public:
   
    LZWBinFa ()
    {
	gyoker = new Csomopont;
	gyoker = fa;
    }
//~LZWBinFa......
//a Csompópont class:
private:
    class Csomopont
    {
    public:
        Csomopont (char b = '/'):betu (b), balNulla (0), jobbEgy (0)
        {};
        ~Csomopont ()
        {};
        {return balNulla;}
        {return jobbEgy;}
        {balNulla = gy;}
        {jobbEgy = gy;}
        char getBetu () const
        {return betu;}

    private:
        char betu;
        Csomopont *balNulla;
        Csomopont *jobbEgy;
        Csomopont (const Csomopont &);
        Csomopont & operator= (const Csomopont &);
    };
    Csomopont *fa;
    int melyseg, atlagosszeg, atlagdb;
    double szorasosszeg;
    LZWBinFa (const LZWBinFa &);
    LZWBinFa & operator= (const LZWBinFa &);

    void kiir (Csomopont * elem, std::ostream & os)
    {
        if (elem != NULL)
        {
            ++melyseg;
            kiir (elem->egyesGyermek (), os);
            for (int i = 0; i < melyseg; ++i)
                os << "---";
            os << elem->getBetu () << "(" << melyseg - 1 << ")" << std::endl;
            kiir (elem->nullasGyermek (), os);
            --melyseg;
        }
    }
    void szabadit (Csomopont * elem)
    {
        if (elem != NULL)
        {
            szabadit (elem->egyesGyermek ());
            szabadit (elem->nullasGyermek ());
            delete elem;
		delete Csomopont;
        }
    }]]></programlisting>

    </section>        
                
    <section>
        <title>Mutató a gyökér</title>
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a 
            fával!
        </para>
        <para>
            Megoldás videó: 
        </para>
	<para>
	A feladat megoldásában tutoriáltam: Győri Márk Patrikot.
	</para>
        <para>
            Megoldás forrása: <link xlink:href="./Welch/mutato.cpp">
<filename>Mutató a gyökér</filename>
</link> 
        </para>
	<para>
	Első lépésként át kell írnunk a gyökeret hogy mutató legyen, ehez mindössze annyit kell tennünk hogy csillagot teszünk elé.
	</para>
<programlisting language='c'><![CDATA[Csomopont *gyoker;]]></programlisting>
	<para>
	Ezután ha megpróbáljuk fordítani láthatjuk hogy kismilliónyi hibát jelez, ezeket kell javítanunk.
	</para>
	<para>
	Kezdjük már is a legelején, a konstruktort írjuk át valahogy így:
	</para>
<programlisting language='c'><![CDATA[    LZWBinFa ()
    {
	gyoker = new Csomopont();
	fa = gyoker;
    }]]></programlisting>
	<para>
	Ezt ha megléptük akkor sikeresen helyet foglaltunk a memóriában a csomópontnak amire a gyökér mutat, továbbá a fa mutatót is ráállítottuk a gyökérre.	
	</para>
	<para>
	Mivel már pointer a gyökér ezért a szabadításnál '.' helyett '->' operátort kell alkalmaznunk, írjuk hát át ezt is!
	</para>
<programlisting language='c'><![CDATA[{
        szabadit (gyoker ->egyesGyermek ());
        szabadit (gyoker ->nullasGyermek ());
    }]]></programlisting>
	<para>
	Valamint, szintén a gyökér pointer léte miatt a kódban szereplő <programlisting language='c'><![CDATA["&gyoker"]]></programlisting> kifejezéseket is át kell írnunk simán "gyoker"-re, ugyanis nekünk nem a pointer címére lesz szükségünk sehol hanem arra a címre amire mutat, tegyük meg hát ezeket a lépéseket is!
	</para>
    </section>            

<section>
        <title>Mozgató szemantika</title>
        <para>
            Írj az előző programhoz mozgató konstruktort és értékadást, a mozgató konstruktor legyen a mozgató
            értékadásra alapozva!
        </para>
        <para>
            Megoldás videó:
        </para>
	<para>
	A feladat megoldásában tutoriált engem: Győri Márk Patrik
	</para>
        <para>
            Megoldás forrása: <link xlink:href="./Welch/mozgato.cpp">
<filename>Mozgató szemantika</filename>
</link> 
        </para>
        <para>
            <programlisting language="c"><![CDATA[    LZWBinFa & operator= (const LZWBinFa & cp) {
        if(&cp != this)
            rekurzioIndutasa(cp.gyoker);
        return *this;
    };]]></programlisting>
	</para>
            <para>
                Ehhez a feladathoz azt kell tennünk hogy létrehozunk egy operátort, aminek az a feladata hogy másolja le magát ha nem a gyökeret tartalmazza. Valamint a másolás rekurzióval végződik, mely azt fogja tenni hogy a fa minden egyes ágát újra létrehozza viszont egy másik gyökérre. A kód csípetekből jól fog látszani, viszont a kódott a tutoromtól (Győri Márk Patriktól) kaptam, nem pedig saját.
            </para>
            <programlisting language="c"><![CDATA[    void rekurzioIndutasa(Csomopont csm){
        if(csm.nullasGyermek()){
            fa = &gyoker;
            Csomopont *uj = new Csomopont ('0');
            fa->ujNullasGyermek (uj);
            fa = fa->nullasGyermek();
            std::cout << "GYOKER: nullas van"  << std::endl;
            rekurzioAzAgakon(csm.nullasGyermek());
        }
        if(csm.egyesGyermek()){
            fa = &gyoker;
            Csomopont *uj = new Csomopont ('1');
            fa->ujEgyesGyermek (uj);
            fa = fa->egyesGyermek();
            std::cout << "GYOKER: egyes van"  << std::endl;
            rekurzioAzAgakon(csm.egyesGyermek());
        }
    }
 
    void rekurzioAzAgakon(Csomopont * csm){
        if (csm->nullasGyermek()) {
            std::cout << "====van nullas" << std::endl;
            Csomopont *uj = new Csomopont ('0');
            fa->ujNullasGyermek(uj);
        }
        if (csm->egyesGyermek()){
            std::cout << "====van egyes" << std::endl;
            Csomopont *uj = new Csomopont ('1');
            fa->ujEgyesGyermek(uj);
        }
        Csomopont * nullas = fa->nullasGyermek();
        Csomopont * egyes = fa->egyesGyermek();
        if(nullas){
            fa = nullas;
            rekurzioAzAgakon(csm->nullasGyermek());
        }
        if(egyes){
            fa = egyes;
            rekurzioAzAgakon(csm->egyesGyermek());
        }
    }]]></programlisting>
        <para>
            A rekurzioInditasa függvény fogja elindítani a rekurziót, ha van nullás gyermeke akkor azon fog elsőként tovább futni, majd ha van egyes gyermeke akkor arra is meghívásra fog kerülni.
            A fő eljárást maga a rekurzioAzAgakon függvény fogja elvégezni nekünk, ez fog átfutni az összes ágon, és majd Ő fogja létrehozni az új csomópontokat.
        </para>
        <programlisting language="c"><![CDATA[LZWBinFa binFa2;
    binFa2 = binFa;]]></programlisting>
        <para>
            A másolás az egyenlőség jel operátorral meghívva történik, így az alap binFa átmásolódik a binFa2-be.
        </para>
    </section>                  

</chapter>                
