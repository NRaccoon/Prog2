<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Schwarzenegger!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Szoftmax Py MNIST</title>
        <para>
            Python
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/j7f9SkJR3oc">https://youtu.be/j7f9SkJR3oc</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0">https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0</link> (/tensorflow-0.9.0/tensorflow/examples/tutorials/mnist/), <link xlink:href="https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol">https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol</link>  
        </para>
<para>
Forráskód: 
<link xlink:href="./Schwarzenegger/szoftmax.py">
<filename>Szoftmax</filename>
</link></para>
        <para>
            Ebben a feladatban Python nyelvben fogjuk megírni a MNIST-et amivel egy képfelismerő programot készítünk, melynek feladata az lesz hogy felismerje hány pont van a képen. Ehhez viszont szükségünk lesz a Python3 fejlesztő csomagra és a Tensorflowra is.
        </para>
	<para>Hogyan tudjuk telepíteni a Tensorflowt és a Python3 fejlesztői csomagot?</para>
	<para>A Python pip package segítségével a következőképpen tehetjük meg ezt:</para>
	<programlisting><![CDATA[
sudo apt update
sudo apt install python3-dev python3-pip
sudo apt-get install python3-matplotlib
sudo pip3 install -U virtualenv
virtualenv --system-site-packages python3
source ./venv/bin/activate
pip install --upgrade pip
pip install --upgrade tensorflow
python -c "import tensorflow as tf; tf.enable_eager_execution(); print(tf.reduce_sum(tf.random_normal([1000, 1000])))"
deactivate]]>
</programlisting>
	<para>A MNIST egy adatbázis mely tanítóanyagokat tartalmazz, olyan hálózatok tanítására aminek a feladata valamilyen képfelismeréshez vagy képelemzéshez köthető. Az SMNIST ennek úgynevezett "gyermeke" lett. A Bátfai Tanár úr féle nyílt forráskódú SMNIST-el "játszani" és tesztelgetni szabadon lehetett/kellett. Mi saját SMNIST for human próbálkozást is csináltunk/teszteltünk pár szakon lévő sráccal. Érdekes tud lenni ez, valamint versenyezni is lehet benne. Későbbiekben ez a képfelismerés, arcfelismerés stb gépek számára szerintem nagyobb teret fog behódítani jelenlegi állapotához képest. Ugyanis hasznos funkció lehet akár egy telefonban is. (Már léteznek próbálkozások kihasználására.)</para>

<para>Számomra a Python nyelv és annak használata kevésbé ismert, de más nyelvhez pl C vagy C++-hoz hasonlóan itt is elsőként importáljuk a szükséges könyvtárakat. Ilyen például ebben a feladatban használt Tensorflow könyvtár is.</para>

<programlisting><![CDATA[
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse

from tensorflow.examples.tutorials.mnist import input_data

import tensorflow as tf
old_v = tf.logging.get_verbosity()
tf.logging.set_verbosity(tf.logging.ERROR)

import matplotlib.pyplot

import tensorflow as tf
old_v = tf.logging.get_verbosity()
tf.logging.set_verbosity(tf.logging.ERROR)]]>
</programlisting>

<programlisting><![CDATA[
FLAGS = None

def main(_):
  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)]]>
</programlisting>


<para>A modell elkészítése.</para>
<programlisting><![CDATA[
x = tf.placeholder(tf.float32, [None, 784])
  W = tf.Variable(tf.zeros([784, 10]))
  b = tf.Variable(tf.zeros([10]))
  y = tf.matmul(x, W) + b

  
  y_ = tf.placeholder(tf.float32, [None, 10])

  cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels = y_, logits = y))
  train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

  sess = tf.InteractiveSession()]]>
</programlisting>
<para>A tanítása:</para>
<programlisting><![CDATA[
  tf.initialize_all_variables().run(session=sess)
  print("-- A halozat tanitasa")  
  for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})
    if i % 100 == 0:
      print(i/10, "%")
  print("----------------------------------------------------------")

  print("-- A halozat tesztelese")  
  correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))  
  print("-- Pontossag: ", sess.run(accuracy, feed_dict={x: mnist.test.images,
                                      y_: mnist.test.labels}))
  print("----------------------------------------------------------")
  
  print("-- A MNIST 42. tesztkepenek felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
  
  img = mnist.test.images[42]
  image = img

  matplotlib.pyplot.imshow(image.reshape(28, 28), cmap=matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("4.png")  
  matplotlib.pyplot.show()

  classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

  print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
  print("----------------------------------------------------------")

  print("-- A MNIST 11. tesztkepenek felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")

  img = mnist.test.images[11]
  image = img
  matplotlib.pyplot.imshow(image.reshape(28,28), cmap=matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("8.png")  
  matplotlib.pyplot.show()

  classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

  print("-- Ezt a halozat ennek ismeri fel: ", classification[0])
  print("----------------------------------------------------------")

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--data_dir', type=str, default='/tmp/tensorflow/mnist/input_data',
                      help='Directory for storing input data')
  FLAGS = parser.parse_args()
  tf.app.run()]]>
</programlisting>
<para>Bonyolult kissé a kód egyrészt mert a hivatalos MNIST példaprogramja az alapja másrészt számomra azért is mert a Python forráskód olvasata még nem megszokott.</para>
</section>
    
    <section>
        <title>Mély MNIST</title>
        <para>
            Python            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
           Ezt a feladatot passzolnám!
        </para>
    </section>        
    
    <section>
        <title>Minecraft-MALMÖ</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/bAPSu3Rndi8">https://youtu.be/bAPSu3Rndi8</link>      
        </para>
        <para>
            Megoldás forrása:                
        </para>
	<para><link xlink:href="./Schwarzenegger/minecraft.py">Minecraft-MALMÖ</link></para>
        <para>
         A Malmo egy platform amely segít nekünk kutatásban a mesterséges intelligencia területén. A feladatban az ágens-programozásba csöppenhetünk bele, melyet a népszerű játékkal a Minecrafttal ötvözve probálhatunk ki. A feladat olyan Ai-t írni Stevenek hogy kikerülje az elé kerülő akadályokat, ezáltal nem csapdába esve haladni a mapon és felfedezni azt.   
        </para>
	<para>
	Tesztelni a mellékelt kódot nem tudtam, ugyanis nem rendelkezem a Minecrafttal, de működnie kell.
	</para>
	<para>Mint mindenhol itt is elsőnek a szükséges könyvtárak importálásával kell kezdenünk:</para>
	<programlisting><![CDATA[from __future__ import print_function

from builtins import range
import MalmoPython
import os
import sys
import time]]></programlisting>
	<para>
	Majd létre hozunk egy alapértelmezett Malmo objektet:
	</para>
<programlisting><![CDATA[agent_host = MalmoPython.AgentHost()
try:
    agent_host.parse( sys.argv )
except RuntimeError as e:
    print('ERROR:',e)
    print(agent_host.getUsage())
    exit(1)
if agent_host.receivedArgument("help"):
    print(agent_host.getUsage())
    exit(0)

my_mission = MalmoPython.MissionSpec(missionXML, True)
my_mission_record = MalmoPython.MissionRecordSpec()]]></programlisting>
	<para>
	Majd megkíséreljük a "küldetésünket" elindítani:
	</para>
<programlisting><![CDATA[max_retries = 3
for retry in range(max_retries):
    try:
        agent_host.startMission( my_mission, my_mission_record )
        break
    except RuntimeError as e:
        if retry == max_retries - 1:
            print("Error starting mission:",e)
            exit(1)
        else:
            time.sleep(2)]]></programlisting>
	<para>
	Majd loopolnunk kell addig amíg a mi kis küldetésünk el nem indul:
	</para>
<programlisting><![CDATA[print("Waiting for the mission to start ", end=' ')
world_state = agent_host.getWorldState()
while not world_state.has_mission_begun:
    print(".", end="")
    time.sleep(0.1)
    world_state = agent_host.getWorldState()
    for error in world_state.errors:
        print("Error:",error.text)

print()
print("Mission running ", end=' ')

    agent_host.sendCommand( "move 1" )

stevex = 0
stevez = 0
stevey = 0
steveyaw = 0
stevepitch = 0
elotteidx = 0
elotteidxj = 0
elotteidxb = 0
akadaly = 0]]></programlisting>
	<para>
	Ezután a kód többi része maga az a kódrész ami loopolva lesz, tehát ami majd akkor fut folyamatosan amíg a küldetésünk tart.
	</para>
<programlisting><![CDATA[while world_state.is_mission_running:
.
.
.
#(a forráskód fent szerepel nem csúnyítanám vele a könyvet)
.
.
.
print()
print("Mission ended")]]></programlisting>
<para>A kódban látható hogy a koordináták segítségével valamint a kód részében az if-ek segítségével tudjuk neki megmondani mikor mit csináljon. Például hogy mikor forduljon vagy mikor kezdjen ugrálni a karakterünk. Ezeknek a finom módosítgatásával tudjuk biztosítani a küldetésünk sikerét, akár különböző biomokon vagy különböző akadályokon való "túlélésen", és leküzdésében.</para>
    </section>

</chapter> 
             
